# -*- coding: utf-8 -*-
"""Tp2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kca0XTVIBWE1MU_v8pVXGjyqGqHMfUTH
"""

import numpy
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

df=pd.read_csv('/content/sample_data/DATA1.csv')

df.head()

df.tail()

print(df.columns)

df.info()

sns.countplot(x='Diabetic',data=df)

df['Diabetic'].hist()

df.dropna()

df.drop_duplicates()

from sklearn.model_selection import train_test_split
x=df.loc[:,df.columns !='Diabetic']
y=df['Diabetic']
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25,stratify=df['Diabetic'],random_state=20)

from sklearn.tree import DecisionTreeClassifier
tree=DecisionTreeClassifier(random_state=0,criterion="entropy")
tree.fit(x_train,y_train)

tree.predict(x_test)

print('Decision tree accuracy:',tree.score(x_test,y_test))

hyperparameters = tree.get_params()
print('Hyperparametres du decisionTreeClassifier : ')
for param,value in hyperparameters.items():
  print(f"{param}:{value}")

dt_classifier = DecisionTreeClassifier()
param_grid ={
     'criterion': ['gini', 'entropy'],
    'splitter': ['best', 'random'],
    'max_depth': [None, 5, 10, 15, 20,25],
    'min_samples_split': [2, 5, 10,15],
    'min_samples_leaf': [1, 2, 4,8],
    'max_features': [None, 'sqrt', 'log2'],
    'max_leaf_nodes': [None, 10, 20,25],
    'class_weight': [None, 'balanced'],
}

from sklearn.model_selection import GridSearchCV
grid_search = GridSearchCV(estimator=dt_classifier,param_grid=param_grid,cv=3)
grid_search.fit(x,y)

print("best params :",grid_search.best_params_)
print("best score :",grid_search.best_score_)

from sklearn.model_selection import RandomizedSearchCV
from sklearn.tree import DecisionTreeClassifier
from scipy.stats import randint

tree = DecisionTreeClassifier()
param_dist = {
    'criterion': ['gini', 'entropy'],
    'splitter': ['best', 'random'],
    'max_depth': randint(1, 20),
    'min_samples_split': randint(2, 10),
    'max_features': ['auto', 'sqrt', 'log2', None]
}
random_search = RandomizedSearchCV(estimator=tree, param_distributions=param_dist, n_iter=100, cv=5, random_state=42)